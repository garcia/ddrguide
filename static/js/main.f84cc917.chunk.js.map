{"version":3,"sources":["Home.tsx","Term.tsx","TermGroup.tsx","SearchBar.tsx","SortSelect.tsx","Glossary.tsx","ScrollToTop.tsx","App.tsx","serviceWorker.js","index.js","Autosuggest.module.scss"],"names":["Home","className","to","React","Component","ReactMarkdownMoized","moize","react","ReactMarkdown","routerLinkRenderer","props","href","match","children","formatText","text","source","renderers","link","title","aka","trivia","anchor","term","toLowerCase","replace","definition","undefined","acronym","join","id","groupName","Suggestion","displayText","this","matchedTerm","termProps","boldRegion","boldL","boldR","slice","input","glossaryStore","GlossaryStore","getInstance","length","suggestions","suggested","allTerms","startsWith","push","SearchBar","state","value","onSuggestionsFetchRequested","bind","onSuggestionsClearRequested","onChange","setState","getSuggestions","event","params","newValue","inputProps","placeholder","getSuggestionValue","renderSuggestion","theme","Autosuggest_theme","SortSelect","handleChange","sort","target","onSortUpdate","termLookup","instance","AssertionError","sourceIndex","glossaryJson","forEach","entry","GlossarySort","compare","a","b","localeCompare","sectionName","charAt","toUpperCase","concept","Glossary","store","sortedTerms","sortTerms","terms","groupedTerms","groupTerms","groups","currentSectionName","currentGroup","property","content","Object","keys","map","group","key","t","ScrollToTop","withRouter","prevProps","location","pathname","window","scrollTo","Sidebar","exact","activeClassName","Footer","history","createBrowserHistory","basename","process","App","Helmet","defaultTitle","titleTemplate","charSet","rel","path","component","Boolean","hostname","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f84cc917.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Home.scss';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className=\"home\">\n                <div className=\"homeHeader\">\n                    <h1>DDRGuide</h1>\n                    <p>Site description goes here.</p>\n                </div>\n                <div className=\"homePages homeGuides\">\n                    <ul>\n                        <li className=\"newcomersLink\">\n                            <Link to=\"/newcomers/\">\n                                <h3>Newcomers &amp; Novices</h3>\n                                <p>Where / why / how to play DDR, basic arcade etiquette, and more.</p>\n                            </Link>\n                        </li>\n                        <li className=\"whatChangedLink\">\n                            <Link to=\"/whatchanged/\">\n                                <h3>What’s Changed?</h3>\n                                <p>Returning DDR veteran? Learn what’s changed since your last mix.</p>\n                            </Link>\n                        </li>\n                        <li className=\"improvingLink\">\n                            <Link to=\"/improving/\">\n                                <h3>Improving Your Scores</h3>\n                                <p>Advice for intermediate players who want to play competitively.</p>\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"homePages homeReferences\">\n                    <ul>\n                        <li className=\"glossaryLink\">\n                            <Link to=\"/glossary/\">\n                                <h3>Glossary</h3>\n                                <p>A comprehensive glossary of modern DDR terminology &amp; slang.</p>\n                            </Link>\n                        </li>\n                        <li className=\"songsLink\">\n                            <Link to=\"/songs/\">\n                                <h3>Song List</h3>\n                                <p>Basic information on every song in DDR A / A20.</p>\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport ReactMarkdown, { ReactMarkdownProps } from 'react-markdown';\nimport { HashLink } from 'react-router-hash-link';\nimport moize from 'moize';\n\nimport './Term.scss';\n\n// Memoize markdown - needs some ugly type juggling to work around moize not supporting ES5-style classes\nconst ReactMarkdownMoized = moize.react(ReactMarkdown as any as (props: ReactMarkdownProps) => React.ReactElement);\n\nexport interface TermProps {\n    term: string;\n    acronym?: string;\n    aka?: string[];\n    definition: string;\n    trivia?: string;\n    help?: string;\n    concept: string;\n    sourceIndex: number;\n}\n\nfunction routerLinkRenderer(props: {href: string, children: JSX.Element}): JSX.Element {\n    return (\n      props.href.match(/^(https?:)?\\/\\//)\n        ? <a href={props.href}>{props.children}</a>\n        : <HashLink to={props.href}>{props.children}</HashLink>\n    );\n  }      \n\nfunction makeTermAnchor(s: string): string {\n    return \"term-\" + s.toLowerCase().replace(\" \", \"-\");\n}\n\nfunction formatText(text: string): JSX.Element {\n    return <ReactMarkdownMoized\n            source={text}\n            renderers={{link: routerLinkRenderer}}\n        />;\n}\n\nfunction Term(props: TermProps) {\n    let anchor: string = makeTermAnchor(props.term);\n    let title: JSX.Element;\n    let aka: JSX.Element | undefined;\n    let definition: JSX.Element = <div className=\"definition\">{formatText(props.definition)}</div>;\n    let trivia: JSX.Element | undefined;\n\n    if (props.acronym !== undefined) {\n        title = <h3>{props.term} ({props.acronym})</h3>\n    } else {\n        title = <h3>{props.term}</h3>\n    }\n\n    if (props.aka !== undefined) {\n        aka = <div className=\"aka\"><p>Also known as: {props.aka.join(\", \")}</p></div>;\n    }\n\n    if (props.trivia !== undefined) {\n        trivia = (\n            <div className=\"trivia\">\n                <h4>Trivia</h4>\n                {formatText(props.trivia)}\n            </div>\n        );\n    }\n    \n    return (\n        <div id={anchor} className=\"Term\">\n            {title}\n            {aka}\n            {definition}\n            {trivia}\n        </div>\n    );\n}\n\nexport default moize.react(Term);","import React from 'react';\nimport moize from 'moize';\n\nimport './TermGroup.scss';\n\nconst TermGroup: React.FunctionComponent<{groupName: string}> = props =>\n    <div className=\"termGroup\">\n        <h2>{props.groupName}</h2>\n        {props.children}\n    </div>;\n\n\nexport default moize.react(TermGroup);","import React, { ChangeEvent } from 'react';\nimport Autosuggest, { SuggestionsFetchRequestedParams } from 'react-autosuggest';\nimport { TermProps } from './Term';\nimport { GlossaryStore } from './Glossary';\nimport Autosuggest_theme from './Autosuggest.module.scss';\n\ninterface SearchBarProps {\n}\n\ninterface SearchBarState {\n    value: string;\n    suggestions: SuggestionProps[];\n}\n\ninterface SuggestionProps {\n    termProps: TermProps;\n    matchedTerm: string;\n    boldRegion: [number, number];\n}\n\nclass Suggestion extends React.Component<SuggestionProps> {\n\n    static getSuggestions(input: string): SuggestionProps[] {\n        const glossaryStore: GlossaryStore = GlossaryStore.getInstance();\n\n        if (input.length === 0) {\n            return [];\n        }\n        input = input.toLowerCase();\n\n        let suggestions: SuggestionProps[] = [];\n        let suggested: {[key: string]: boolean | undefined} = {};\n        \n        for (let termProps of glossaryStore.allTerms) {\n            if (suggested[termProps.term] === undefined && termProps.term.toLowerCase().startsWith(input)) {\n                suggestions.push({\n                    termProps: termProps,\n                    matchedTerm: termProps.term,\n                    boldRegion: [0, input.length]\n                });\n                suggested[termProps.term] = true;\n            }\n        }\n\n        for (let termProps of glossaryStore.allTerms) {\n            if (suggested[termProps.term] === undefined && termProps.aka !== undefined) {\n                for (let aka of termProps.aka) {\n                    if (aka.toLowerCase().startsWith(input)) {\n                        suggestions.push({\n                            termProps: termProps,\n                            matchedTerm: aka,\n                            boldRegion: [0, input.length]\n                        });\n                        suggested[termProps.term] = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return suggestions;\n    }\n\n    render() {\n        let displayText: string;\n        if (this.props.matchedTerm === this.props.termProps.term) {\n            displayText = this.props.matchedTerm;\n        } else {\n            displayText = this.props.matchedTerm + ' (' + this.props.termProps.term + ')';\n        }\n        var [boldL, boldR] = this.props.boldRegion;\n        return (\n            <>\n                {displayText.slice(0, boldL)}\n                <b>{displayText.slice(boldL, boldR)}</b>\n                {displayText.slice(boldR)}\n            </>\n        );\n    }\n}\n\nclass SearchBar extends React.Component<SearchBarProps> {\n    \n    glossaryStore: GlossaryStore = GlossaryStore.getInstance();\n    state: SearchBarState;\n    \n    constructor(props: SearchBarProps) {\n        super(props);\n        \n        this.state = {\n            value: '',\n            suggestions: []\n        };\n\n        this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(this);\n        this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onSuggestionsFetchRequested(value: SuggestionsFetchRequestedParams): void {\n        this.setState({\n            suggestions: Suggestion.getSuggestions(value.value)\n        });      \n    }\n\n    onSuggestionsClearRequested(): void {\n        this.setState({\n            suggestions: []\n        });      \n    }\n    \n    onChange(event: ChangeEvent<HTMLInputElement>, params: Autosuggest.ChangeEvent): void {\n        this.setState({\n            value: params.newValue\n        });\n    };\n\n    render() {\n        const inputProps = {\n            placeholder: 'Search',\n            value: this.state.value,\n            onChange: this.onChange\n        };\n\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={(props) => props.termProps.term}\n                renderSuggestion={(props) => <Suggestion {...props} />}\n                inputProps={inputProps}\n                theme={Autosuggest_theme}\n            />\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './SortSelect.scss';\n\nexport type SortValue = \"alphabetical\" | \"by-concept\";\n\ninterface SortState {\n    value: SortValue;\n}\n\ninterface SortProps {\n    onSortUpdate: (sort: SortValue) => void;\n}\n\nclass SortSelect extends React.Component<SortProps, SortState> {\n    state: SortState;\n\n    constructor(props: SortProps) {\n        super(props);\n        this.state = {\n            value: \"alphabetical\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        let sort = event.target.value as SortValue;\n        this.setState({\n            value: sort\n        });\n        this.props.onSortUpdate(sort);\n    }\n\n    render() {\n        return (\n            <select className=\"sortSelect\" value={this.state.value} onChange={this.handleChange}>\n                <option value=\"alphabetical\">Sort A-Z</option>\n                <option value=\"by-concept\">Sort by concept</option>\n            </select>\n        )\n    }\n\n}\n\nexport default SortSelect;","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { AssertionError } from 'assert';\n\nimport Term, { TermProps } from './Term';\nimport TermGroup from './TermGroup';\nimport glossaryJson from './glossary.json';\nimport './Glossary.scss';\nimport SearchBar from './SearchBar';\nimport SortSelect, { SortValue } from './SortSelect';\n\ninterface GlossaryProps {\n\n}\n\ninterface GlossaryState {\n    sort: SortValue;\n    terms: TermProps[];\n    groupedTerms: {[key: string]: TermProps[]};\n}\n\nexport class GlossaryStore {\n    \n    static instance?: GlossaryStore;\n\n    allTerms: TermProps[] = [];\n    termLookup: {[key: string]: TermProps} = {};\n\n    constructor() {\n        if (GlossaryStore.instance !== undefined) {\n            throw new AssertionError();\n        }\n        let sourceIndex: number = 0;\n        glossaryJson.forEach(entry => {\n            let props: TermProps = {sourceIndex, ...entry};\n            this.termLookup[entry.term] = props;\n            this.allTerms.push(props);\n            sourceIndex++;\n        });\n    }\n\n    static getInstance(): GlossaryStore {\n        if (GlossaryStore.instance === undefined) {\n            GlossaryStore.instance = new GlossaryStore();\n        }\n        return GlossaryStore.instance;\n    }\n}\n\nconst GlossarySort: {[key in SortValue]: {compare: (a: TermProps, b: TermProps) => number, sectionName: (t: TermProps) => string } } = {\n    \"alphabetical\": {\n        compare: (a, b) => a.term.localeCompare(b.term),\n        sectionName: (a) => a.term.charAt(0).toUpperCase(),\n    },\n    \"by-concept\": {\n        compare: (a, b) => a.concept.localeCompare(b.concept) || (a.sourceIndex - b.sourceIndex),\n        sectionName: (a) => a.concept\n    }\n};\n\nclass Glossary extends React.Component<GlossaryProps> {\n    store: GlossaryStore = GlossaryStore.getInstance();\n    state: GlossaryState;\n\n    constructor(props: GlossaryProps) {\n        super(props);\n        \n        let initialSort: SortValue = \"alphabetical\";\n        let sortedTerms: TermProps[] = this.store.allTerms.slice();\n        this.sortTerms(sortedTerms, initialSort);\n        this.state = {\n            sort: initialSort,\n            terms: sortedTerms,\n            groupedTerms: this.groupTerms(initialSort, sortedTerms)\n        };\n        \n        this.onSortUpdate = this.onSortUpdate.bind(this);\n    }\n\n    onSortUpdate(sort: SortValue) {\n        this.setState((state: GlossaryState, props: GlossaryProps) => {\n            this.sortTerms(state.terms, sort);\n            return {\n                sort: sort,\n                terms: state.terms,\n                groupedTerms: this.groupTerms(sort, state.terms)\n            };\n        });\n    }\n\n    sortTerms(terms: TermProps[], sort: SortValue): void {\n        terms.sort(GlossarySort[sort].compare);\n    }\n\n    groupTerms(sort: SortValue, sortedTerms: TermProps[]): { [key: string]: TermProps[]; } {\n        let groups: { [key: string]: TermProps[]; } = {};\n        let currentSectionName: string = GlossarySort[sort].sectionName(sortedTerms[0]);\n        let currentGroup: TermProps[] = [];\n        for (let term of sortedTerms) {\n            let sectionName: string = GlossarySort[sort].sectionName(term);\n            if (sectionName !== currentSectionName) {\n                groups[currentSectionName] = currentGroup;\n                currentGroup = [];\n                currentSectionName = sectionName;\n            }\n            currentGroup.push(term);\n        }\n        return groups;\n    }\n\n    render() {\n        return (\n            <div className=\"glossary\">\n                <Helmet>\n                    <title>Glossary</title>\n                    <meta property=\"og:title\" content=\"Glossary | DDRGuide\" />\n                    <meta property=\"og:description\" content=\"A comprehensive glossary of DanceDanceRevolution terminology.\" />\n                </Helmet>\n                <div className=\"contentHeader\">\n                    <h1>Glossary</h1>\n                </div>\n                <div className=\"sortAndFilter\">\n                    <h2>Filter:</h2>\n                    <div><SortSelect onSortUpdate={this.onSortUpdate} /></div>\n                    <div><SearchBar /></div>\n                </div>\n                <div className=\"terms\">\n                    {Object.keys(this.state.groupedTerms).map(group =>\n                        <TermGroup key={group} groupName={group}>\n                            {this.state.groupedTerms[group].map(t => <Term key={t.term} {...t} />)}\n                        </TermGroup>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Glossary;","import * as React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\n// Scroll restoration based on https://reacttraining.com/react-router/web/guides/scroll-restoration.\nvar ScrollToTop = withRouter(\n    class ScrollToTopWithoutRouter extends React.Component<RouteComponentProps<any>> {\n        componentDidUpdate(prevProps: Readonly<RouteComponentProps<any>>) {\n            if (this.props.location.pathname !== prevProps.location.pathname) {\n                window.scrollTo(0, 0);\n            }\n        }\n\n        render(): JSX.Element | null {\n            return null;\n        }\n    }\n);\n\nexport default ScrollToTop;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Router, Route, NavLink, Link } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nimport './App.scss';\nimport Home from './Home';\nimport Glossary from './Glossary';\nimport ScrollToTop from './ScrollToTop';\n  \nfunction Sidebar() {\n    return (\n        <nav className=\"column\">\n            <ul>\n                <li className=\"homeLink\">\n                    <NavLink to=\"/\" exact={true} activeClassName=\"current\">(logo)</NavLink>\n                </li>\n                <li className=\"newcomersLink\">\n                    <NavLink to=\"/newcomers/\" activeClassName=\"current\">Newcomers &amp; Novices</NavLink>\n                </li>\n                <li className=\"whatChangedLink\">\n                    <NavLink to=\"/whatchanged/\" activeClassName=\"current\">What's Changed?</NavLink>\n                </li>\n                <li className=\"improvingLink\">\n                    <NavLink to=\"/improving/\" activeClassName=\"current\">Improving Your Scores</NavLink>\n                </li>\n                <li className=\"glossaryLink\">\n                    <NavLink to=\"/glossary/\" activeClassName=\"current\">Glossary</NavLink>\n                </li>\n                <li className=\"songsLink\">\n                    <NavLink to=\"/songs/\" activeClassName=\"current\">Songs</NavLink>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nfunction Footer() {\n    return (\n        <footer>\n            <ul className=\"footerSections\">\n                <li>\n                    <h3>DDRGuide.com</h3>\n                    <ul className=\"footerLinks\">\n                        <li><Link to=\"/about/contributors/\">Contributors</Link></li>\n                        <li><Link to=\"/about/source/\">Source</Link></li>\n                        <li><a href=\"https://twitter.com/DDRGuide\">Twitter</a></li>\n                    </ul>\n                </li>\n                <li>\n                    <h3>Friends</h3>\n                    <ul className=\"footerLinks\">\n                        <li><a href=\"https://ddrcommunity.com/\">DDRCommunity</a></li>\n                        <li><a href=\"https://twitter.com/sf_evolved\">SF Evolved</a></li>\n                    </ul>\n                </li>\n                <li>\n                    <h3>Mission</h3>\n                    <p>\n                        Our goal is to make general knowledge about DDR accessible to anyone and everyone interested.\n                        If you'd like to contribute, message us on Twitter <a href=\"https://twitter.com/DDRGuide\">@DDRGuide</a>.\n                    </p>\n                </li>\n            </ul>\n        </footer>\n    )\n}\n\nexport const history = createBrowserHistory({\n    basename: process.env.PUBLIC_URL\n});\n\nfunction App() {\n    return (\n        <Router history={history}>\n            <Helmet defaultTitle=\"DDRGuide\" titleTemplate=\"%s | DDRGuide\">\n                <meta charSet=\"utf-8\" />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content=\"DDRGuide\" />\n                <meta property=\"og:site_name\" content=\"DDRGuide\" />\n                <meta property=\"og:description\" content=\"Learn where, why, and how to play DanceDanceRevolution. Help for newcomers, advice for competitive play, and references for DDR terminology and songs.\" />\n                <link rel=\"canonical\" href=\"https://www.ddrguide.com/\" />\n            </Helmet>\n            <div className=\"App\">\n                <div className=\"top\">\n                    <Route path=\"/:any+\" component={Sidebar} />\n                    <main className=\"column\">\n                        <Route path=\"/\" exact component={Home} />\n                        <Route path=\"/glossary/\" component={Glossary} />\n                    </main>\n                </div>\n                <Footer />\n            </div>\n            <ScrollToTop />\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Autosuggest_container__26yBe\",\"suggestionsList\":\"Autosuggest_suggestionsList__1OlYf\",\"suggestion\":\"Autosuggest_suggestion__w5_sr\",\"suggestionHighlighted\":\"Autosuggest_suggestionHighlighted__jkCBD\"};"],"sourceRoot":""}