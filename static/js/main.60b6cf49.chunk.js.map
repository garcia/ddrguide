{"version":3,"sources":["Home.tsx","Term.tsx","SearchBar.tsx","SortSelect.tsx","Glossary.tsx","ScrollToTop.tsx","App.tsx","serviceWorker.js","index.js","Autosuggest.module.scss"],"names":["Home","className","to","React","Component","Term","s","toLowerCase","replace","output","index","length","nextNewline","indexOf","nextLink","push","slice","linkEnd","console","error","linkData","linkDivider","linkDisplay","linkTerm","anchor","startsWith","this","makeTermAnchor","source","join","renderers","link","routerLinkRenderer","title","aka","trivia","props","term","definition","formatText","undefined","acronym","id","href","match","children","Suggestion","displayText","matchedTerm","termProps","boldRegion","boldL","boldR","input","glossaryStore","GlossaryStore","getInstance","suggestions","suggested","allTerms","SearchBar","state","value","onSuggestionsFetchRequested","bind","onSuggestionsClearRequested","onChange","setState","getSuggestions","event","params","newValue","inputProps","placeholder","getSuggestionValue","renderSuggestion","theme","Autosuggest_theme","SortSelect","handleChange","sort","target","onSortUpdate","termLookup","instance","AssertionError","tmpConceptIndex","glossaryJson","forEach","entry","temp","concept","toString","padStart","Glossary","store","sortedTerms","sortTerms","terms","a","b","localeCompare","property","content","map","t","key","ScrollToTop","withRouter","prevProps","location","pathname","window","scrollTo","Sidebar","exact","activeClassName","history","createBrowserHistory","basename","process","App","Helmet","defaultTitle","titleTemplate","charSet","rel","path","component","Boolean","hostname","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.60b6cf49.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Home.scss';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className=\"home\">\n                <div className=\"homeHeader\">\n                    <h1>DDRGuide</h1>\n                    <p>Site description goes here.</p>\n                </div>\n                <div className=\"homePages homeGuides\">\n                    <ul>\n                        <li className=\"newcomersLink\">\n                            <Link to=\"/newcomers/\">\n                                <h3>Newcomers &amp; Novices</h3>\n                                <p>Where / why / how to play DDR, basic arcade etiquette, and more.</p>\n                            </Link>\n                        </li>\n                        <li className=\"whatChangedLink\">\n                            <Link to=\"/whatchanged/\">\n                                <h3>What’s Changed?</h3>\n                                <p>Returning DDR veteran? Learn what’s changed since your last mix.</p>\n                            </Link>\n                        </li>\n                        <li className=\"improvingLink\">\n                            <Link to=\"/improving/\">\n                                <h3>Improving Your Scores</h3>\n                                <p>Advice for intermediate players who want to play competitively.</p>\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"homePages homeReferences\">\n                    <ul>\n                        <li className=\"glossaryLink\">\n                            <Link to=\"/glossary/\">\n                                <h3>Glossary</h3>\n                                <p>A comprehensive glossary of modern DDR terminology &amp; slang.</p>\n                            </Link>\n                        </li>\n                        <li className=\"songsLink\">\n                            <Link to=\"/songs/\">\n                                <h3>Song List</h3>\n                                <p>Basic information on every song in DDR A / A20.</p>\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { HashLink } from 'react-router-hash-link';\n\nimport './Term.scss';\n\nexport interface TermProps {\n    term: string;\n    acronym?: string;\n    aka?: string[];\n    definition: string;\n    trivia?: string;\n    help?: string;\n    concept: string;\n}\n\nclass Term extends React.Component<TermProps> {\n\n    static routerLinkRenderer(props: {href: string, children: JSX.Element}): JSX.Element {\n        return (\n          props.href.match(/^(https?:)?\\/\\//)\n            ? <a href={props.href}>{props.children}</a>\n            : <HashLink to={props.href}>{props.children}</HashLink>\n        );\n      }      \n\n    makeTermAnchor(s: string): string {\n        return \"term-\" + s.toLowerCase().replace(\" \", \"-\");\n    }\n\n    formatText(s: string): JSX.Element {\n        // Pre-format for Markdown\n        let output: string[] = [];\n        let index: number = 0;\n\n        while (index < s.length) {\n            \n            // Find next occurrence of either a newline or a link marker\n            let nextNewline = s.indexOf(\"\\n\", index);\n            let nextLink = s.indexOf(\"[\", index);\n\n            if (nextNewline >= 0 && (nextLink < 0 || nextNewline < nextLink)) {\n                \n                // Newline is next - push text fragment, then two newlines to start a new Markdown paragraph\n                output.push(s.slice(index, nextNewline));\n                output.push(\"\\n\");\n                index = nextNewline + 1;\n\n            } else if (nextLink >= 0 && (nextNewline < 0 || nextLink < nextNewline)) {\n                \n                // Link marker is next - push text fragment, then parse the link\n                output.push(s.slice(index, nextLink));\n\n                // Find next closing bracket\n                let linkEnd: number = s.indexOf(\"]\", nextLink);\n                if (linkEnd < 0) {\n                    console.error(\"Missing closing bracket for link at index \" + index + \" in string: \" + s);\n                    break;\n                }\n\n                // Check for dividing \"|\" - if present, the left part is the text to display and the right part is the term to link\n                let linkData: string = s.slice(nextLink+1, linkEnd);\n                let linkDivider: number = linkData.indexOf(\"|\");\n                let linkDisplay: string;\n                let linkTerm: string;\n                if (linkDivider >= 0) {\n                    linkDisplay = linkData.slice(0, linkDivider);\n                    linkTerm = linkData.slice(linkDivider+1);\n                } else {\n                    linkDisplay = linkTerm = linkData;\n                }\n\n                let anchor: string = linkTerm.startsWith(\"http\") ? linkTerm : \"#\" + this.makeTermAnchor(linkTerm);\n\n                // Push the resulting link\n                output.push(\"[\" + linkDisplay + \"](\" + anchor + \")\");\n                index = linkEnd + 1;\n\n            } else {\n\n                // No more newlines or links to parse - push remaining text\n                output.push(s.slice(index));\n                index = s.length;\n\n            }\n        }\n\n        return <ReactMarkdown\n                source={output.join(\"\")}\n                renderers={{link: Term.routerLinkRenderer}}\n            />;\n    }\n\n    render() {\n        let anchor: string = this.makeTermAnchor(this.props.term);\n        let title: JSX.Element;\n        let aka: JSX.Element | undefined;\n        let definition: JSX.Element = <div className=\"definition\">{this.formatText(this.props.definition)}</div>;\n        let trivia: JSX.Element | undefined;\n\n        if (this.props.acronym !== undefined) {\n            title = <h2>{this.props.term} ({this.props.acronym})</h2>\n        } else {\n            title = <h2>{this.props.term}</h2>\n        }\n\n        if (this.props.aka !== undefined) {\n            aka = <div className=\"aka\"><p>Also known as: {this.props.aka.join(\", \")}</p></div>;\n        }\n\n        if (this.props.trivia !== undefined) {\n            trivia = (\n                <div className=\"trivia\">\n                    <h3>Trivia</h3>\n                    {this.formatText(this.props.trivia)}\n                </div>\n            );\n        }\n        \n        return (\n            <div id={anchor} className=\"Term\">\n                {title}\n                {aka}\n                {definition}\n                {trivia}\n            </div>\n        );\n    }\n}\n\nexport default Term;","import React, { ChangeEvent } from 'react';\nimport Autosuggest, { SuggestionsFetchRequestedParams } from 'react-autosuggest';\nimport { TermProps } from './Term';\nimport { GlossaryStore } from './Glossary';\nimport Autosuggest_theme from './Autosuggest.module.scss';\n\ninterface SearchBarProps {\n}\n\ninterface SearchBarState {\n    value: string;\n    suggestions: SuggestionProps[];\n}\n\ninterface SuggestionProps {\n    termProps: TermProps;\n    matchedTerm: string;\n    boldRegion: [number, number];\n}\n\nclass Suggestion extends React.Component<SuggestionProps> {\n\n    static getSuggestions(input: string): SuggestionProps[] {\n        const glossaryStore: GlossaryStore = GlossaryStore.getInstance();\n\n        if (input.length === 0) {\n            return [];\n        }\n        input = input.toLowerCase();\n\n        let suggestions: SuggestionProps[] = [];\n        let suggested: {[key: string]: boolean | undefined} = {};\n        \n        for (let termProps of glossaryStore.allTerms) {\n            if (suggested[termProps.term] === undefined && termProps.term.toLowerCase().startsWith(input)) {\n                suggestions.push({\n                    termProps: termProps,\n                    matchedTerm: termProps.term,\n                    boldRegion: [0, input.length]\n                });\n                suggested[termProps.term] = true;\n            }\n        }\n\n        for (let termProps of glossaryStore.allTerms) {\n            if (suggested[termProps.term] === undefined && termProps.aka !== undefined) {\n                for (let aka of termProps.aka) {\n                    if (aka.toLowerCase().startsWith(input)) {\n                        suggestions.push({\n                            termProps: termProps,\n                            matchedTerm: aka,\n                            boldRegion: [0, input.length]\n                        });\n                        suggested[termProps.term] = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return suggestions;\n    }\n\n    render() {\n        let displayText: string;\n        if (this.props.matchedTerm === this.props.termProps.term) {\n            displayText = this.props.matchedTerm;\n        } else {\n            displayText = this.props.matchedTerm + ' (' + this.props.termProps.term + ')';\n        }\n        var [boldL, boldR] = this.props.boldRegion;\n        return (\n            <>\n                {displayText.slice(0, boldL)}\n                <b>{displayText.slice(boldL, boldR)}</b>\n                {displayText.slice(boldR)}\n            </>\n        );\n    }\n}\n\nclass SearchBar extends React.Component<SearchBarProps> {\n    \n    glossaryStore: GlossaryStore = GlossaryStore.getInstance();\n    state: SearchBarState;\n    \n    constructor(props: SearchBarProps) {\n        super(props);\n        \n        this.state = {\n            value: '',\n            suggestions: []\n        };\n\n        this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(this);\n        this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onSuggestionsFetchRequested(value: SuggestionsFetchRequestedParams): void {\n        this.setState({\n            suggestions: Suggestion.getSuggestions(value.value)\n        });      \n    }\n\n    onSuggestionsClearRequested(): void {\n        this.setState({\n            suggestions: []\n        });      \n    }\n    \n    onChange(event: ChangeEvent<HTMLInputElement>, params: Autosuggest.ChangeEvent): void {\n        this.setState({\n            value: params.newValue\n        });\n    };\n\n    render() {\n        const inputProps = {\n            placeholder: 'Search',\n            value: this.state.value,\n            onChange: this.onChange\n        };\n\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={(props) => props.termProps.term}\n                renderSuggestion={(props) => <Suggestion {...props} />}\n                inputProps={inputProps}\n                theme={Autosuggest_theme}\n            />\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './SortSelect.scss';\n\nexport type SortValue = \"alphabetical\" | \"by-concept\";\n\ninterface SortState {\n    value: SortValue;\n}\n\ninterface SortProps {\n    onSortUpdate: (sort: SortValue) => void;\n}\n\nclass SortSelect extends React.Component<SortProps, SortState> {\n    state: SortState;\n\n    constructor(props: SortProps) {\n        super(props);\n        this.state = {\n            value: \"alphabetical\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        let sort = event.target.value as SortValue;\n        this.setState({\n            value: sort\n        });\n        this.props.onSortUpdate(sort);\n    }\n\n    render() {\n        return (\n            <select className=\"sortSelect\" value={this.state.value} onChange={this.handleChange}>\n                <option value=\"alphabetical\">Sort A-Z</option>\n                <option value=\"by-concept\">Sort by concept</option>\n            </select>\n        )\n    }\n\n}\n\nexport default SortSelect;","import React from 'react';\nimport Helmet from 'react-helmet';\nimport { AssertionError } from 'assert';\n\nimport Term, { TermProps } from './Term';\nimport glossaryJson from './glossary.json';\nimport './Glossary.scss';\nimport SearchBar from './SearchBar';\nimport SortSelect, { SortValue } from './SortSelect';\n\ninterface GlossaryProps {\n\n}\n\ninterface GlossaryState {\n    sort: SortValue;\n    terms: TermProps[];\n}\n\nexport class GlossaryStore {\n    \n    static instance?: GlossaryStore;\n\n    allTerms: TermProps[] = [];\n    termLookup: {[key: string]: TermProps} = {};\n\n    constructor() {\n        if (GlossaryStore.instance !== undefined) {\n            throw new AssertionError();\n        }\n        let tmpConceptIndex = 0;\n        glossaryJson.forEach(entry => {\n            let temp: TermProps = {concept: tmpConceptIndex.toString().padStart(3, \"0\"), ...entry};\n            this.termLookup[entry.term] = temp;\n            this.allTerms.push(temp);\n            tmpConceptIndex++;\n        })\n    }\n\n    static getInstance(): GlossaryStore {\n        if (GlossaryStore.instance === undefined) {\n            GlossaryStore.instance = new GlossaryStore();\n        }\n        return GlossaryStore.instance;\n    }\n}\n\nclass Glossary extends React.Component<GlossaryProps> {\n    store: GlossaryStore = GlossaryStore.getInstance();\n    state: GlossaryState;\n\n    constructor(props: GlossaryProps) {\n        super(props);\n        \n        let initialSort: SortValue = \"alphabetical\";\n        let sortedTerms: TermProps[] = this.store.allTerms.slice();\n        this.sortTerms(sortedTerms, initialSort);\n        this.state = {\n            sort: initialSort,\n            terms: sortedTerms\n        };\n        \n        this.onSortUpdate = this.onSortUpdate.bind(this);\n    }\n\n    onSortUpdate(sort: SortValue) {\n        this.setState((state: GlossaryState, props: GlossaryProps) => {\n            this.sortTerms(state.terms, sort);\n            return {\n                sort: sort,\n                terms: state.terms\n            };\n        });\n    }\n\n    sortTerms(terms: TermProps[], sort: SortValue): void {\n        let sorters: {[key in SortValue]: ((a: TermProps, b: TermProps) => number)} = {\n            \"alphabetical\": ((a, b) => a.term.localeCompare(b.term)),\n            \"by-concept\": ((a, b) => a.concept.localeCompare(b.concept))\n        };\n\n        terms.sort(sorters[sort]);\n    }\n\n    render() {\n        return (\n            <div className=\"glossary\">\n                <Helmet>\n                    <title>Glossary</title>\n                    <meta property=\"og:title\" content=\"Glossary | DDRGuide\" />\n                    <meta property=\"og:description\" content=\"A comprehensive glossary of DanceDanceRevolution terminology.\" />\n                </Helmet>\n                <div className=\"contentHeader\">\n                    <h1>Glossary</h1>\n                </div>\n                <div className=\"sortAndFilter\">\n                    <h2>Filter:</h2>\n                    <div><SortSelect onSortUpdate={this.onSortUpdate} /></div>\n                    <div><SearchBar /></div>\n                </div>\n                <div className=\"terms\">\n                    {this.state.terms.map(t => <Term key={t.term} {...t} />)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Glossary;","import * as React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\n// Scroll restoration based on https://reacttraining.com/react-router/web/guides/scroll-restoration.\nvar ScrollToTop = withRouter(\n    class ScrollToTopWithoutRouter extends React.Component<RouteComponentProps<any>> {\n        componentDidUpdate(prevProps: Readonly<RouteComponentProps<any>>) {\n            if (this.props.location.pathname !== prevProps.location.pathname) {\n                window.scrollTo(0, 0);\n            }\n        }\n\n        render(): JSX.Element | null {\n            return null;\n        }\n    }\n);\n\nexport default ScrollToTop;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Router, Route, NavLink, Link } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nimport './App.scss';\nimport Home from './Home';\nimport Glossary from './Glossary';\nimport ScrollToTop from './ScrollToTop';\n  \nfunction Sidebar() {\n    return (\n        <nav className=\"column\">\n            <div className=\"columnContents\">\n                <ul>\n                    <li className=\"homeLink\">\n                        <NavLink to=\"/\" exact={true} activeClassName=\"current\">(logo)</NavLink>\n                    </li>\n                    <li className=\"newcomersLink\">\n                        <NavLink to=\"/newcomers/\" activeClassName=\"current\">Newcomers &amp; Novices</NavLink>\n                    </li>\n                    <li className=\"whatChangedLink\">\n                        <NavLink to=\"/whatchanged/\" activeClassName=\"current\">What's Changed?</NavLink>\n                    </li>\n                    <li className=\"improvingLink\">\n                        <NavLink to=\"/improving/\" activeClassName=\"current\">Improving Your Scores</NavLink>\n                    </li>\n                    <li className=\"glossaryLink\">\n                        <NavLink to=\"/glossary/\" activeClassName=\"current\">Glossary</NavLink>\n                    </li>\n                    <li className=\"songsLink\">\n                        <NavLink to=\"/songs/\" activeClassName=\"current\">Songs</NavLink>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport const history = createBrowserHistory({\n    basename: process.env.PUBLIC_URL\n});\n\nfunction App() {\n    return (\n        <Router history={history}>\n            <Helmet defaultTitle=\"DDRGuide\" titleTemplate=\"%s | DDRGuide\">\n                <meta charSet=\"utf-8\" />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content=\"DDRGuide\" />\n                <meta property=\"og:site_name\" content=\"DDRGuide\" />\n                <meta property=\"og:description\" content=\"Learn where, why, and how to play DanceDanceRevolution. Help for newcomers, advice for competitive play, and references for DDR terminology and songs.\" />\n                <link rel=\"canonical\" href=\"https://www.ddrguide.com/\" />\n            </Helmet>\n            <div className=\"App\">\n                <div className=\"top\">\n                    <Route path=\"/:any+\" component={Sidebar} />\n                    <article className=\"column\">\n                        <div className=\"columnContents\">\n                            <Route path=\"/\" exact component={Home} />\n                            <Route path=\"/glossary/\" component={Glossary} />\n                        </div>\n                    </article>\n                </div>\n                <footer>\n                    <ul className=\"footerSections\">\n                        <li>\n                            <h3>DDRGuide.com</h3>\n                            <ul className=\"footerLinks\">\n                                <li><Link to=\"/about/contributors/\">Contributors</Link></li>\n                                <li><Link to=\"/about/source/\">Source</Link></li>\n                                <li><a href=\"https://twitter.com/DDRGuide\">Twitter</a></li>\n                            </ul>\n                        </li>\n                        <li>\n                            <h3>Friends</h3>\n                            <ul className=\"footerLinks\">\n                                <li><a href=\"https://ddrcommunity.com/\">DDRCommunity</a></li>\n                                <li><a href=\"https://twitter.com/sf_evolved\">SF Evolved</a></li>\n                            </ul>\n                        </li>\n                        <li>\n                            <h3>Mission</h3>\n                            <p>\n                                Our goal is to make general knowledge about DDR accessible to anyone and everyone interested.\n                                If you'd like to contribute, message us on Twitter <a href=\"https://twitter.com/DDRGuide\">@DDRGuide</a>.\n                            </p>\n                        </li>\n                    </ul>\n                </footer>\n            </div>\n            <ScrollToTop />\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Autosuggest_container__26yBe\",\"suggestionsList\":\"Autosuggest_suggestionsList__1OlYf\",\"suggestion\":\"Autosuggest_suggestion__w5_sr\",\"suggestionHighlighted\":\"Autosuggest_suggestionHighlighted__jkCBD\"};"],"sourceRoot":""}